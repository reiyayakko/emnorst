{
  "type": "File",
  "start": 0,
  "end": 1568,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 62,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 1568,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 62,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "\r\nreiyayakkoPackage.addModule(\"object.Map\", ({modules})=>class ObjectMap {\r\n    constructor(map){\r\n        this.map = [];\r\n    }\r\n    static _find(key){\r\n        return ([entryKey])=>modules.equals(entryKey, key);\r\n    }\r\n    get size(){\r\n        return this.map.length;\r\n    }\r\n    get(key){\r\n        return this.map.find(modules.object.Map._find(key));\r\n    }\r\n    set(key, value){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            this.map.push([key, value]);\r\n        else\r\n            this.map[index] = [key, value];\r\n    }\r\n    has(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        return index !== -1;\r\n    }\r\n    delete(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            return false;\r\n        this.map.splice(index, 1);\r\n        return true;\r\n    }\r\n    clear(){\r\n        this.map = [];\r\n    }\r\n    entries(){\r\n        return this.map.map(entry=>entry);\r\n    }\r\n    forEach(){\r\n        this.map.forEach(...arguments);\r\n    }\r\n    keys(){\r\n        return this.map.map(([key])=>key);\r\n    }\r\n    values(){\r\n        return this.map.map(([,value])=>value);\r\n    }\r\n    [Symbol.iterator](){\r\n        const that = this;\r\n        return (function* (){\r\n            for(const entry of that.map)\r\n                yield entry;\r\n        })();\r\n    }\r\n});\r\nreiyayakkoPackage.addModule({\r\n    name: [\"object.Map.prototype\", Symbol.toStringTag],\r\n    enumerable: false,\r\n}, ()=>\"ObjectMap\");\r\n//",
        "start": 2,
        "end": 1566,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 4
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\r\nreiyayakkoPackage.addModule(\"object.Map\", ({modules})=>class ObjectMap {\r\n    constructor(map){\r\n        this.map = [];\r\n    }\r\n    static _find(key){\r\n        return ([entryKey])=>modules.equals(entryKey, key);\r\n    }\r\n    get size(){\r\n        return this.map.length;\r\n    }\r\n    get(key){\r\n        return this.map.find(modules.object.Map._find(key));\r\n    }\r\n    set(key, value){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            this.map.push([key, value]);\r\n        else\r\n            this.map[index] = [key, value];\r\n    }\r\n    has(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        return index !== -1;\r\n    }\r\n    delete(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            return false;\r\n        this.map.splice(index, 1);\r\n        return true;\r\n    }\r\n    clear(){\r\n        this.map = [];\r\n    }\r\n    entries(){\r\n        return this.map.map(entry=>entry);\r\n    }\r\n    forEach(){\r\n        this.map.forEach(...arguments);\r\n    }\r\n    keys(){\r\n        return this.map.map(([key])=>key);\r\n    }\r\n    values(){\r\n        return this.map.map(([,value])=>value);\r\n    }\r\n    [Symbol.iterator](){\r\n        const that = this;\r\n        return (function* (){\r\n            for(const entry of that.map)\r\n                yield entry;\r\n        })();\r\n    }\r\n});\r\nreiyayakkoPackage.addModule({\r\n    name: [\"object.Map.prototype\", Symbol.toStringTag],\r\n    enumerable: false,\r\n}, ()=>\"ObjectMap\");\r\n//",
      "start": 2,
      "end": 1566,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 61,
          "column": 4
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "\r\nreiyayakkoPackage.addModule(\"object.Map\", ({modules})=>class ObjectMap {\r\n    constructor(map){\r\n        this.map = [];\r\n    }\r\n    static _find(key){\r\n        return ([entryKey])=>modules.equals(entryKey, key);\r\n    }\r\n    get size(){\r\n        return this.map.length;\r\n    }\r\n    get(key){\r\n        return this.map.find(modules.object.Map._find(key));\r\n    }\r\n    set(key, value){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            this.map.push([key, value]);\r\n        else\r\n            this.map[index] = [key, value];\r\n    }\r\n    has(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        return index !== -1;\r\n    }\r\n    delete(key){\r\n        const index = this.map.findIndex(modules.object.Map._find(key));\r\n        if(index === -1)\r\n            return false;\r\n        this.map.splice(index, 1);\r\n        return true;\r\n    }\r\n    clear(){\r\n        this.map = [];\r\n    }\r\n    entries(){\r\n        return this.map.map(entry=>entry);\r\n    }\r\n    forEach(){\r\n        this.map.forEach(...arguments);\r\n    }\r\n    keys(){\r\n        return this.map.map(([key])=>key);\r\n    }\r\n    values(){\r\n        return this.map.map(([,value])=>value);\r\n    }\r\n    [Symbol.iterator](){\r\n        const that = this;\r\n        return (function* (){\r\n            for(const entry of that.map)\r\n                yield entry;\r\n        })();\r\n    }\r\n});\r\nreiyayakkoPackage.addModule({\r\n    name: [\"object.Map.prototype\", Symbol.toStringTag],\r\n    enumerable: false,\r\n}, ()=>\"ObjectMap\");\r\n//",
      "start": 2,
      "end": 1566,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 61,
          "column": 4
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1568,
      "end": 1568,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 0
        }
      }
    }
  ]
}